),
tabsetPanel(
tabPanel(
"Analytics",
dataTableOutput(
"table_analytics_gen"
)
),
tabPanel(
"Graph",
plotOutput(
"plot_list_movie_gen"
)
)
)
)
),
tabItem(
tabName = "tab_list_movies_year",
fluidRow(
selectInput(
inputId = "yearId",
label = "Choose Year of Release",
choices = levels(
as.factor(data.gen.mon$YearOfRelease)
)
),
tabsetPanel(
tabPanel(
"Analytics",
dataTableOutput(
"table_analytics_year"
)
),
tabPanel(
"Graph",
plotlyOutput(
"plot_list_movie_year"
)
)
)
)
),
tabItem(
tabName = "tab_top10",
fluidRow(
selectInput(
inputId = "selectId_top10",
label = "Choose what type of dataset",
choices = c("Gross", "Rotten Tomatoes' Tomatometer", "Rotten Tomatoes' Audience Score", "IMDB")
),
tabsetPanel(
tabPanel(
"Analytics",
dataTableOutput(
"table_analytics_top10"
)
),
tabPanel(
"Graph",
plotlyOutput(
"plot_list_movie_top10"
)
)
)
)
)
)
)
)
ui <-
dashboardPage(
dashboardHeader(
title = "MCU"
),
dashboardSidebar(
sidebarMenu(
#                menuItem("General", tabName = "tab_general", icon = icon("atlas")),
#                menuItem("Table", tabName = "tab_table", icon = icon("table"))
menuItem(
"General",
icon = icon(
"atlas"
),
sidebarMenu(
menuItem(
"List of Movies",
sidebarMenu(
menuItem(
"General",
tabName = "tab_list_movies_gen"
),
menuItem(
"Year of Release",
tabName = "tab_list_movies_year"
)
)
),
menuItem(
"Top 10",
tabName = "tab_top10"
)
)
)
)
),
dashboardBody(
tabItems(
tabItem(
tabName = "tab_list_movies_gen",
fluidRow(
selectInput(
inputId = "selectId",
label = "Choose what type of dataset",
choices = c("Gross", "Ratings")
),
tabsetPanel(
tabPanel(
"Analytics",
dataTableOutput(
"table_analytics_gen"
)
),
tabPanel(
"Graph",
plotOutput(
"plot_list_movie_gen"
)
)
)
)
),
tabItem(
tabName = "tab_list_movies_year",
fluidRow(
selectInput(
inputId = "yearId",
label = "Choose Year of Release",
choices = levels(
as.factor(data.gen.mon$YearOfRelease)
)
),
tabsetPanel(
tabPanel(
"Analytics",
dataTableOutput(
"table_analytics_year"
)
),
tabPanel(
"Graph",
plotlyOutput(
"plot_list_movie_year"
)
)
)
)
),
tabItem(
tabName = "tab_top10",
fluidRow(
selectInput(
inputId = "selectId_top10",
label = "Choose what type of dataset",
choices = c("Gross", "Rotten Tomatoes' Tomatometer", "Rotten Tomatoes' Audience Score", "IMDB")
),
tabsetPanel(
tabPanel(
"Analytics",
dataTableOutput(
"table_analytics_top10"
)
),
tabPanel(
"Graph",
plotlyOutput(
"plot_list_movie_top10"
)
)
)
)
)
)
)
)
data.gen.mon <- data[,c("Movie","YearOfRelease","Budget", "DomesticScreens", "DomesticGross","WeekendGross","OverseasGross","WorldwideGross","TrailerViews")]
data.gen.mon.char <- data.gen.mon
data.gen.mon.char$DomesticGross <- paste("$", comma(data.gen.mon.char$DomesticGross))
data.gen.mon.char$WeekendGross <- paste("$", comma(data.gen.mon.char$WeekendGross))
data.gen.mon.char$DomesticGross <- paste("$", comma(data.gen.mon.char$DomesticGross))
data.gen.mon.char$WorldwideGross <- paste("$", comma(data.gen.mon.char$WorldwideGross))
data.gen.mon.char$TrailerViews <- paste(comma(data.gen.mon.char$TrailerViews),"views")
data.gen.mon.char
data.gen.mon.top10.char <- data.gen.mon.top10
data.gen.mon.top10.char$DomesticGross <- paste("$", comma(data.gen.mon.top10.char$DomesticGross))
data.gen.mon.top10.char$WeekendGross <- paste("$", comma(data.gen.mon.top10.char$WeekendGross))
data.gen.mon.top10.char$OverseasGross <- paste("$", comma(data.gen.mon.top10.char$OverseasGross))
data.gen.mon.top10.char$WorldwideGross <- paste("$", comma(data.gen.mon.top10.char$WorldwideGross))
data.gen.mon.top10 <- head(data.gen.mon[order(-data.gen.mon$OverseasGross),],10)
data.gen.mon.top10 <- head(data.gen.mon[order(-data.gen.mon$OverseasGross),],10)
data.gen.mon.top10
data.gen.mon.top10.char
data.gen.mon.top10.char <- data.gen.mon.top10
data.gen.rat.trailerviews <- data[,c("Movie","TrailerViews")]
data.gen.rat.cinemascore.top10 <- head(data.gen.rat.cinemascore[order(-data.gen.rat.cinemascore$CinemaScore)])
data.gen.rat.cinemascore.top10 <- head(data.gen.rat.cinemascore[order(-data.gen.rat.cinemascore$CinemaScore),],10)
str(data)
data.gen.rat.trailerviews.top10 <- head(data.gen.rat.trailerviews[order(-data.gen.rat.trailerviews$TrailerViews),],10)
data.gen.rat.trailerviews.top10
runApp('LBB')
runApp('LBB')
shiny::runApp('LBB')
runApp('LBB')
runApp('LBB')
runApp('LBB')
runApp('LBB')
runApp('LBB')
runApp('LBB')
runApp('LBB')
sum(data.gen.mon$DomesticGross)
comma(sum(data.gen.mon$DomesticGross))
mean(data.gen.mon$DomesticGross)
mean(data.gen.rat$RottenTomatoesTomato)
mean(data.gen.rat$RottenTomatoesTomato), "%"
paste0(
mean(data.gen.rat$RottenTomatoesTomato), "%"
)
as.integer(mean(data.gen.rat$RottenTomatoesTomato))
runApp('LBB')
data.gen.rat$IMDB
as.numeric(mean(data.gen.rat$IMDB))
format(round(mean(data.gen.rat$IMDB),2), nsmall = 2)
format(round(mean(data.gen.rat$IMDB),1), nsmall = 1)
runApp('LBB')
runApp('LBB')
data.conn <- read.csv("LBB/MarvelTimeline.csv")
data.conn <- read.csv("LBB/CharacterNetwork.csv")
library(lubridate)
shiny::runApp('LBB')
runApp('LBB')
data.time <- read.csv("LBB/MarvelTimeline.csv")
View(data.time)
data.conn <- read.csv("CharacterNetwork.csv")
data.time <- read.csv("LBB/MarvelTimeline.csv")
View(data.time)
data.time
data.conn
data.conn <- read.csv("LBB/CharacterNetwork.csv")
data.time <- read.csv("LBB/MarvelTimeline.csv")
View(data.time)
View(data.conn)
str(data.time)
year(data.time$Time)
year(data.time$Time)
year(data.time$Time)
library(lubridate)
year(data.time$Time)
as.Date.numeric(year(data.time$Time))
as.Date.numeric(year(NA,data.time$Time))
as.Date.numeric(year(data.time$Time,NA))
str(as.Date(data.time$Time))
str(as.Date(as.character(data.time$Time)))
str(as.Date(as.factor(data.time$Time)))
str(as.Date(as.factor(data.time$Time)))
str(as.Date(as.factor(data.time$Time)))
str(as.Date(as.factor(data.time$Time)))
str(as.Date(as.factor(data.time$Time)))
str(as.Date(as.factor(data.time$Time)))
str(as.Date(as.factor(data.time$Time)))
data.time <- read.csv("LBB/MarvelTimeline.csv")
data.time
data.time$Time <- as.character(data.time$Time)
data.time$Time <- as.Date(as.character(data.time$Time), format = "%Y")
data.time$Time
data.time$Time <- year(as.Date(as.character(data.time$Time), format = "%Y"))
data.time$Time <- year(as.Date(as.character(data.time$Time), format = "%Y"))
data.time$Time
data.time$Timeline <- year(as.Date(as.character(data.time$Timeline), format = "%Y"))
data.time$Timeline
gsub("[;]","",data.time$MainHero.........................)
data.time$MainHero......................... <- gsub("[;]","",data.time$MainHero.........................)
data.time %>%
rename(
MainHero = MainHero.........................
)
data.time
rename(.data = data.time,MainHero = MainHero.........................)
colnames(data.time) <- c("Movie","Time","Timeline","MainHero")
data.time
str(data.time)
data.time$MainHero <- as.factor(data.time$MainHero)
str(data.time)
main_hero <- data.time$MainHero
main_hero
main_hero <- levels(data.time$MainHero)
main_hero
main_hero_color <- c("brown2","azure3","blueviolet","darkblue","palegoldenrod","gold","deepskyblue","chartreuse3","red3","red","orangered")
data.time$MainHero<- factor(data.time$MainHero,levels = main_hero, ordered = T)
install.packages(timevis)
install.packages("timevis")
library(timevis)
data.time.df.timeMovie <- data.frame(
id = 1:22,
content = data.time$Movie,
start = data.time$Time,
end = c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA)
)
timevis(data.time.df.timeMovie)
runApp('LBB')
runApp('LBB')
runApp('LBB')
data.time.df.timeStory <- data.frame(
id = 1:22,
content = data.time$Movie,
start = data.time$Timeline,
end = c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA)
)
runApp('LBB')
install.packages("GGally")
library(GGally)
library(GGally)
devtools::install_github("briatte/ggnet")
library(ggnet)
devtools::install_github("briatte/ggnet")
devtools::install_github("briatte/ggnet")
library(network)
library(sna)
library(ggplot2)
install.packages("statnet.common")
library(network)
library(sna)
library(ggplot2)
install.packages(c("igraph"))
install.packages(c("igraph", "ndtv"))
library(igraph)
library(ndtv)
test <- levels(data.time$Time) + levels(data.time$Timeline)
test
test <- levels(data.time$Time)
test
str(data.time$Time)
str(data.conn)
test <- levels(data.conn$Hero1) + levels(data.conn$Hero2)
test <- levels(data.conn$Hero1)\
test <- levels(data.conn$Hero1)
test
test <- merge(test, levels(data.conn$Hero2))
View(test)
test <- levels(data.conn$Hero1)
test <- c(levels(data.conn$Hero2),test)
data.conn <- read.csv("LBB/CharacterNetwork.csv")
data.conn <- read.csv("LBB/CharacterNetwork.csv")
data.conn <- read.csv("LBB/CharacterNetwork.csv")
test <- c(levels(data.conn$Hero2),test)
test <- levels(data.conn$Hero1)
test <- c(levels(data.conn$Hero2),test)
test
data.conn <- read.csv("LBB/CharacterNetwork.csv")
test <- levels(data.conn$Hero1)
test <- c(levels(data.conn$Hero2),test)
test
data.conn <- read.csv("LBB/CharacterNetwork.csv")
test <- levels(data.conn$Hero1)
test <- c(levels(data.conn$Hero2),test)
test
as.factor(test)
test <- levels(test)
test <- levels(data.conn$Hero1)
test <- c(levels(data.conn$Hero2),test)
test <- as.factor(test)
levels(test)
test <- levels(test)
node <- test
edge <- data.conn
nrow(node)
conn <- data.frame(
source = data.conn$Hero1,
target = data.conn$Hero2
)
View(conn)
View(conn)
library(shiny)
install.packages("digest")
y
library(shiny)
library(digest)
install.packages("digest")
library(digest)
library(shiny)
install.packages('digest', repos='http://cran.us.r-project.org')
library(digest)
install.packages(c("clipr", "curl", "pillar", "Rcpp", "rmarkdown", "stopwords", "testthat", "tidytext", "xml2"))
install.packages("shiny")
install.packages("C:/Users/Rakyan/Downloads/Compressed/digest_0.6.20.tar.gz", repos = NULL, type = "source")
options(repos = c(CRAN = "https://cran.rstudio.org"))
install.packages("shiny")
setdiff(dir(.libPaths()), .packages(all = TRUE))
shiny::runApp('LBB')
runApp('LBB')
install.packages("visNetwork")
runApp('LBB')
main_hero
runApp('LBB')
edge
runApp('LBB')
visNetwork(node, conn, width = "100%", height = "400px")
data.frame.node <- data.frame(
nodes = node
)
View(data.frame.node)
(
visNetwork(nodes, conn, width = "100%", height = "400px")
visNetwork(nodes, conn, width = "100%", height = "400px")
visNetwork(nodes, conn, width = "100%", height = "400px")
visNetwork(nodes, conn, width = "100%", height = "400px")
visNetwork(data.frame.node, conn, width = "100%", height = "400px")
runApp('LBB')
visNetwork(data.frame.node, edge, width = "100%", height = "400px")
visNetwork(data.frame.node, data.conn, width = "100%", height = "400px")
visNetwork(data.frame.node, data.conn, width = "100%", height = "400px")
visNetwork(data.frame.node, data.conn, width = "100%", height = "400px")
visNetwork(data.frame.node, data.conn, width = "100%", height = "400px")
visNetwork(data.frame.node, conn, width = "100%", height = "400px")
conn.viznet <- data.frame(
from = data.conn$Hero1,
to = data.conn$Hero2,
type = "mention",
weight = 1
)
conn.viznet
visNetwork(data.frame.node, conn.viznet, width = "100%", height = "400px")
visNetwork(nodes, conn.viznet, width = "100%", height = "400px")
visNetwork(node, conn.viznet, width = "100%", height = "400px")
runApp('LBB')
igraph.options(size = 18)
igraph.options(size = 18)
runApp('LBB')
tkplot(network_conn)
network_conn <- graph_from_data_frame(d = conn, directed = F)
tkplot(network_conn)
install.packages("tk")
install.packages("tcltk")
runApp('LBB')
nrow(data.gen.mon)
nrow(data.gen.mon[data.gen.mon$YearOfRelease == 2008])
nrow(data.gen.mon[data.gen.mon$YearOfRelease == 2008,])
nrow(data.gen.mon[data.gen.mon$YearOfRelease == 2008,])
nrow(data.gen.mon[data.gen.mon$YearOfRelease == 2008,])/nrow(data.gen.mon)
nrow(data.gen.mon[data.gen.mon$YearOfRelease == 2008,])/nrow(data.gen.mon)
runApp('LBB')
order(data.gen.mon$OverseasGross)
data.gen.mon[order(data.gen.mon$OverseasGross),]
data.gen.mon[order(-data.gen.mon$OverseasGross),]
head(data.gen.mon[order(-data.gen.mon$OverseasGross),]),1)
head(data.gen.mon[order(-data.gen.mon$OverseasGross),],1)
temp <- head(data.gen.mon[order(-data.gen.mon$OverseasGross),],1)
runApp('LBB')
temp <- data.gen.mon[data.gen.mon$YearOfRelease == 2014,]
temp
head(temp[order(-temp$OverseasGross),],1)
temp[order(-temp$OverseasGross),]
runApp('LBB')
temp[order(-temp$OverseasGross),]
temp <- data.gen.mon[data.gen.mon$YearOfRelease == 2008,]
temp[order(-temp$OverseasGross),]
temp <- data.gen.mon[data.gen.mon$YearOfRelease == 2014,]
temp <- head(temp[order(-temp$OverseasGross),],1)
temp <- data.gen.mon[data.gen.mon$YearOfRelease == 2014,]
temp[order(-temp$OverseasGross),]
temp[order(-temp$WorldwideGross),]
runApp('LBB')
plot.list <-
aggregate.data.frame(list(DomesticGross = data.gen.mon.top10$DomesticGross),
by = list(data.gen.mon.top10$Movie),
mean) %>%
gather(key = "var", value = "Val_in_mil", -Group.1)
View(plot.list)
plot.list <-
aggregate.data.frame(list(DomesticGross = data.gen.mon.top10$DomesticGross),
by = list(data.gen.mon.top10$Movie),
mean) %>%
gather(key = "var", value = "Val_in_mil", -Group.1) %>%
order(plot.list$Val_in_mil)
plot.list
plot.list <-
aggregate.data.frame(list(DomesticGross = data.gen.mon.top10$DomesticGross),
by = list(data.gen.mon.top10$Movie),
mean) %>%
gather(key = "var", value = "Val_in_mil", -Group.1)
plot.list <- plot.list[order(-plot.list$WorldwideGross),]
plot.list <-
aggregate.data.frame(list(DomesticGross = data.gen.mon.top10$DomesticGross),
by = list(data.gen.mon.top10$Movie),
mean) %>%
gather(key = "var", value = "Val_in_mil", -Group.1)
plot.list <- plot.list[order(-plot.list$WorldwideGross),]
plot.list <- plot.list[order(-plot.list$Val_in_mil),]
plot.list
plot.list <- head(plot.list[order(-plot.list$Val_in_mil),],1)
plot.list
plot.list$Group.1
order(-data.gen.rat.tomato.top10$RottenTomatoesTomato),]
order(-data.gen.rat.tomato.top10$RottenTomatoesTomato)
head(data.gen.rat.imdb.top10[order(-data.gen.rat.tomato.top10$RottenTomatoesTomato),],1)
View(plot.list)
plot.list <- head(data.gen.rat.imdb.top10[order(-data.gen.rat.tomato.top10$RottenTomatoesTomato),],1)
plot.list <- head(data.gen.rat.tomato.top10[order(-data.gen.rat.tomato.top10$RottenTomatoesTomato),],1)
runApp('LBB')
plot.list <- head(data.gen.rat.audience.top10[order(-data.gen.rat.audience.top10$RottenTomatoesUser),],1)
runApp('LBB')
plot.list <- head(data.gen.rat.imdb.top10[order(-data.gen.rat.imdb.top10$IMDB),],1)
runApp('LBB')
