knitr::opts_chunk$set(echo = TRUE)
example<-data.frame(Sky=c("Clear","Cloudy","Clear","Cloudy","Cloudy","Clear","Clear","Cloudy","Clear","Clear"),
Temp=c("High","Normal","Normal","Low","Low","High","Low","Normal","Normal","High"),
Rain=c(0,1,1,1,0,0,1,0,1,1)
)
View(example)
# Probability of Rain / P(Rain=1).
total_rain <- (example$Rain)
# Probability of Rain / P(Rain=1).
total_rain <- sum(example$Rain)
total_hour <- sum(example$Sky)
total_hour <- nrow(example$Sky)
total_hour <- ncol(example$Sky)
# Probability of Rain / P(Rain=1).
total_rain <- sum(example$Rain)/nrow(example)
# Probability of Rain / P(Rain=1).
prob.rain <- sum(example$Rain)/nrow(example)
prop.table.rain <- prop.table(table(example$Rain))
# P(Sky = "Clear").
prop.table.sky.clear <- prop.table(table(example$Sky))
prop.table.sky.clear
# P(Temp = "High").
prop.table.temp.high <- prop.table(table(example$Temp$))
# P(Temp = "High").
prop.table.temp.high <- prop.table(table(example$Temp))
# P(Sky = "Clear").
prop.table.sky.clear <- prop.table(table(example$Sky))
# P(Temp = "High").
prop.table.temp.high <- prop.table(table(example$Temp))
# P(Temp != "Normal").
prop.table.sky.clear
# Calculate the P(Rain=1 | Temp="Normal").
prop.table.rain.temp.normal <- prop.table(table(example$Rain, example$temp))
# Calculate the P(Rain=1 | Temp="Normal").
ex.temp.normal <- example[example$Temp == "Normal",]
ex.temp.normal
table(ex.temp.normal$Rain)
prop.table.rain.normal <- prop.table(table(ex.temp.normal$Rain))
# P(Rain=1 | Sky="Clear") and Odds(Rain=1 | Sky="Clear") = 0.75 / 0.25 =
ex.sky.clear <- example[example$Sky == "Clear",]
prop.table.rain.clear <- prop.table(table(ex.sky.clear$Rain))
# P(Rain=1 | Sky="Cloudy") and Odds(Rain=1 | Sky="Cloudy")
ex.sky.cloudy <- example[example$Sky == "Cloudy",]
# P(Rain=1 | Sky="Clear") and Odds(Rain=1 | Sky="Clear") = 0.667 / 0.333 = 2
ex.sky.clear <- example[example$Sky == "Clear",]
prop.table.rain.clear <- prop.table(table(ex.sky.clear$Rain))
# P(Rain=1 | Sky="Cloudy") and Odds(Rain=1 | Sky="Cloudy")
ex.sky.cloudy <- example[example$Sky == "Cloudy",]
prop.table.rain.cloudy <- prop.table(table(ex.sky.cloudy$Rain))
# Now, Calculate Odds(Rain=1 | Sky="Clear")/Odds(Rain=1 | Sky="Cloudy")
prop.table.rain.cloudy
log(12) - log(6)
log(2)
log(12) - log(6)
log(25)
library(gtools)
curve(logit(x),from=0,to=1,xlab="Probability",ylab="Log of Odds")
# Logit(Rain=1)
logit(0.6)
# Logit(Rain=1 | Sky="Clear")
logut(2/3)
# Logit(Rain=1 | Sky="Clear")
logit(2/3)
# Logit(Rain=1 | Sky="Cloudy")
logit(0.5)
# Find the probability of Rain, given logit(Rain=1)=2.5
exp(2.5)/(exp(2.5)+1)
inv.logit(2.5)
honors <- read.csv("data_input/sample.csv")
honors$hon <- as.factor(honors$hon)
View(honors)
# Create a logistic regression model to predict honors using no predictor.
glm(hon~1,honors)
# Create a logistic regression model to predict honors using no predictor.
glm(hon~1,data - honors)
# Create a logistic regression model to predict honors using no predictor.
glm(hon~1,data - honors,family = "binomial")
# Create a logistic regression model to predict honors using no predictor.
glm(hon~1,data = honors,family = "binomial")
# Create a logistic regression model to predict honors using no predictor.
summary(glm(hon~1,data = honors,family = "binomial"))
library(dplyr, warn.conflicts = F)
library(dplyr, warn.conflicts = F)
honors %>%
honors %>%
select(hon) %>%
table() %>%
prop.table()
honors %>%
select(hon)
honors %>%
select(hon) %>%
table()
honors %>%
select(hon) %>%
table() %>%
prop.table()
log(0.245/0.755)
# Create a logistic regression model to predict honors using 'female' as its predictor.
glm(hom~female,data=honors,family="binomial")
# Create a logistic regression model to predict honors using 'female' as its predictor.
glm(hon~female,data=honors,family="binomial")
# Create a logistic regression model to predict honors using 'female' as its predictor.
summary(glm(hon~female,data=honors,family="binomial"))
# Create a logistic regression model to predict honors using 'female' as its predictor.
summary(glm(hon~.,data=honors,family="binomial"))
# Create a logistic regression model to predict honors using 'female' as its predictor.
summary(glm(hon~female,data=honors,family="binomial"))
honors %>%
select(female) %>%
table() %>%
prop.table()
honors %>%
select(hom) %>%
table() %>%
prop.table()
honors %>%
select(hon) %>%
table() %>%
prop.table()
log(32/77)
log(17/77)
log(32/77)
log(77/32)
log(77/17)
log(74/17)
exp(0.59)/(exp(0.59)+1)
32/77
32/109
exp(0.59)/(exp(0.59)+1)
exp(0.59)/(exp(0.59)+1) * 32
exp(0.59)/(exp(0.59)+1) * 77
exp(0.59)/(exp(0.59)+1) * 74
exp(0.59)/(exp(0.59)+1) * 17
exp(0.59)/(exp(0.59)+1)
exp(0.59)/(exp(0.59)+1)
log(32/77
exp(0.59)/(exp(0.59)+1)
exp(0.59)/(exp(0.59)+1)
log(32/77)
# Now, Calculate Odds(Rain=1 | Sky="Clear")/Odds(Rain=1 | Sky="Cloudy")
log((32/77)/(17/74))
# Now, Calculate Odds(Rain=1 | Sky="Clear")/Odds(Rain=1 | Sky="Cloudy")
(32/77)/(17/74)
glm(hon~math,data=honors,family="binomial")
glm(hon~.,data=honors,family="binomial")
summary(glm(hon~math,data=honors,family="binomial"))
inv.logit(-9.7939)
inv.logit(-9.7939) - inv.logit(9.7939+0.1564)
inv.logit(-9.7939) - inv.logit(-9.7939+0.1564)
logit(inv.logit(-9.7939) - inv.logit(-9.7939+0.1564))
logit(inv.logit(-9.7939) - inv.logit(-9.7939+0.1564))
inv.logit(-9.7939) - inv.logit(-9.7939+0.1564)
inv.logit(-9.7939+0.1564) - inv.logit(-9.7939)
logit(inv.logit(-9.7939+0.1564) - inv.logit(-9.7939))
inv.logit(0.1564)
exp(0.1564)
exp(0.1564*2)
exp(0.1564)
glm(hon~female+read+math,data=honors,family = "binomial")
summary(glm(hon~female+read+math,data=honors,family = "binomial"))
summary(glm(hon~female+read+write+math,data=honors,family = "binomial"))
summary(glm(hon~female+read+math,data=honors,family = "binomial"))
logitA <- -11.77025+(0.97995)+80(0.05906)
summary(glm(hon~female+read+math,data=honors,family = "binomial"))
logitA <- -11.77025+(0.97995)+80*(0.05906)+90*(0.12296)
logitA <- -11.77025+(0.97995)+80*(0.05906)+70*(0.12296)
summary(glm(hon~female+read+math,data=honors,family = "binomial"))
#if A => Read: 80, Math = 90, Female
#if B => Read: 80, Math = 70, Female
logitA <- -11.77025+(0.97995)+80*(0.05906)+90*(0.12296)
logitA <- -11.77025+(0.97995)+80*(0.05906)+70*(0.12296)
knitr::opts_chunk$set(echo = TRUE)
honors <- read.csv("data_input/sample.csv")
honors$hon <- as.factor(honors$hon)
install.packages("caret")
#example: A dan B keduanya perempuan. Nilai read=80. Nilai math A=90 dan nilai math B=70. 'Seberapa mungkin'(Odds) A dapat honors dibandingkan B?
20*0.12296
exp(20*0.12296)
model1<-glm(hon~1,data=honors,family="binomial")
model2<-glm(hon~female,data=honors,family="binomial")
model3<-glm(hon~math,data=honors,family="binomial")
model4<-glm(hon~math+female+read,data=honors,family="binomial")
# Show the AIC value of each model.
model
# Show the AIC value of each model.
aic_model1 <- model1$aic
model1
# Show the AIC value of each model.
aic_model1 <- model1$aic
aic_model2 <- model2$aic
aic_model3 <- model3$aic
aic_model4 <- model4$aic
model1
# Show the AIC value of each model.
aic_model1 <- model1$aic
aic_model2 <- model2$aic
aic_model3 <- model3$aic
aic_model4 <- model4$aic
aic_model1
aic_model2
aic_model3
aic_model4
# Show the Null deviance and residual deviance of each model.
nullDev_model1 <- model1$null.deviance
nullDev_model2 <- model2$null.deviance
nullDev_model3 <- model3$null.deviance
nullDev_model4 <- model4$null.deviance
# Show the Null deviance and residual deviance of each model.
nullDev_model1 <- model1$null.deviance
nullDev_model2 <- model2$null.deviance
nullDev_model3 <- model3$null.deviance
nullDev_model4 <- model4$null.deviance
nullDev_model1
nullDev_model2
nullDev_model3
nullDev_model4
model5<-glm(hon~math+read+write+female,data=honors,family="binomial")
honors
# Make some observation to support your idea here.
honors$write
# Make some observation to support your idea here.
honors$read
# Make some observation to support your idea here.
table(honors$write, honors$hon)
# Make some observation to support your idea here.
table(honors$hon, honors$write)
# Make some observation to support your idea here.
table(honors$hon, honors$read)
# Make some observation to support your idea here.
table(honors$hon, honors$write)
loans.s <- read.csv("data_input/loan2017Q4.csv")
str(loans.s)
# Observe the data here
prop.table.inst <- prop.table(table(loans.s$installment))
# Observe the data here
prop.table.purp <- prop.table(table(loans.s$purpose))
loans.s
set.seed(417)
intrain <- sample(nrow(loans.s), nrow(loans.s)*0.8)
intrain
length(intrain)
loans.train <- loans.s[intrain, ]
loans.test <- loans.s[-intrain, ]
loans.train
loans.test
# Create the glm model here using TRAIN DATASET only and name it 'creditrisk'.
creditrisk <- glm(not_paid ~ verified + purpose + installment + int_rate + home_ownership + grdCtoA + annual_inc, data = loans.train, family = "binomial")
View(creditrisk)
credistrisk
creditrisk
summary(creditrisk)
R.version
loans.test$pred.Risk <- predict(creditrisk,loans.test,type = "response")
loans.test$pred.Risk
loans.test$pred.Risk <- predict(creditrisk,loans.test,type = "link")
loans.test$pred.Risk
loans.test$pred.Risk <- predict(creditrisk,loans.test,type = "terms")
loans.test$pred.Risk
(93+94)/(93+94+57+88)
table("predicted"=as.numeric(loans.test$pred.Risk>=0.5), "actual"=loans.test$not_paid)
loans.test$pred.Risk <- predict(creditrisk,loans.test,type = "respomse")
loans.test$pred.Risk <- predict(creditrisk,loans.test,type = "response")
table("predicted"=as.numeric(loans.test$pred.Risk>=0.5), "actual"=loans.test$not_paid)
(93+94)/(93+94+57+88)
# True Positive / (True Positive + False Negative)
93/(93+68)
# True Positive / (True Positive + False Positive)
93/(93+68)
# True Positive / (True Positive + False Negative)
94/(94+57)
# True Positive / (True Positive + False Positive)
94/(94+68)
caret::confusionMatrix()
caret::confusionMatrix(Actual = loans.test$not_paid,predict=as.numeric(loans.test$pred.Risk >= 0.5))
caret::confusionMatrix(Actual = loans.test$not_paid,predict=as.factor(as.numeric(loans.test$pred.Risk >= 0.5)))
caret::confusionMatrix(data = loans.test, Actual = loans.test$not_paid,predict=as.factor(as.numeric(loans.test$pred.Risk >= 0.5)))
