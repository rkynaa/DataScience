library(MLmetrics, warn.conflicts = F)
library(GGally, warn.conflicts = F)
knitr::opts_chunk$set(echo = TRUE)
predict(model, data.frame(gdp = 600), interval = "prediction", level = 0.95)
knitr::opts_chunk$set(echo = TRUE)
copiers <- read.csv("copiers.csv")
str(copiers)
plot(copiers$Sales, copiers$Profit)
boxplot(copiers$Sales)
# To get the outlier value:
sales_out <- boxplot(copiers$Sales, plot = F)$out
copiers_clean <- copiers[copiers$Sales<4000, ]
copiers_clean_which <- copiers[-which(copiers$Sales %in% sales_out), ]
cor(copiers$Sales, copiers$Profit)
model_rm <- lm(formula = Profit~Sales, data=copiers_clean)
summary(model_rm)
plot(copiers_clean$Sales, copiers_clean$Profit)
abline(a = -83.54810, b = 0.39444) # abline(model_rm)
profit_temp <- -83.54810 + 0.39444 * 350
profit_temp
profit_temp <- -83.54810 + 0.39444 * 245
profit_temp
sales_temp <- c(245, 370, 210, 400)
profit_temp <- -83.54810 + 0.39444 * sales_temp
profit_temp
predict(object = model_rm, newdata = data.frame(Sales = c(245, 370, 210, 400)))
new_copiers <- data.frame(
Sales = c(300, 450, 750, 10)
)
pre_new_copiers <- predict(object = model_rm, newdata = new_copiers)
pre_copiers_clean <- predict(model_rm, copiers_clean)
pre_copiers <- predict(model_rm, copiers)
# pre_copiers - copiers$Sales
library(MLmetrics, warn.conflicts = F)
library(GGally, warn.conflicts = F)
knitr::opts_chunk$set(echo = TRUE)
copiers <- read.csv("copiers.csv")
copiers_clean <- copiers[copiers$Sales<4000,]
model1_rm <- lm(formula = Profit~Sales, data=copiers)
model2_rm <- lm(formula = Profit~Sales, data=copiers_clean)
summary(model1_rm)
summary(model2_rm)
plot(copiers$Sales, copiers$Profit)
abline(model1_rm, col = "red")
abline(model2_rm, col = "blue")
library(dplyr)
crime <- read.csv("data_input/crime.csv") %>% select(-X)
names(crime) <- c("percent_m", "is_south", "mean_education", "police_exp60", "police_exp59", "labour_participation", "m_per1000f", "state_pop", "nonwhites_per1000", "unemploy_m24", "unemploy_m39", "gdp", "inequality", "prob_prison", "time_prison", "crime_rate")
model <- lm(inequality~gdp,crime)
summary(model)
round(predict(object = model, newdata = data.frame(gdp = 600)),2)
ggcorr(crime, label = T, label_size = 3, hjust = 1)
crime_model1 <- lm(formula = inequality~gdp, crime)
crime_model2 <- lm(formula = inequality~gdp+nonwhites_per1000, crime)
crime_model3 <- lm(formula = inequality~gdp+nonwhites_per1000+mean_education, crime)
summary(crime_model1)$r.square
summary(crime_model2)$r.square
summary(crime_model3)$r.square
crime_model4 <- lm(inequality~.,crime)
summary(crime_model4)
pred <- predict(crime_model3, crime)
plot(pred)
# Manually
mean((pred - crime$inequality)^2)
# MSE()
MSE(pred, crime$inequality)
# Manually
sqrt(mean((pred - crime$inequality)^2))
# RMSE()
RMSE(pred, crime$inequality)
# MAE()
MAE(pred, crime$inequality)
# MAPE()
MAPE(pred, crime$inequality)
# "Confidence" interval
predict(model, data.frame(gdp = 600), interval = "confidence", level = 0.95)
predict(model, data.frame(gdp = 600), interval = "prediction", level = 0.95)
knitr::opts_chunk$set(echo = TRUE)
model_full <- lm(formula = inequality~,crime)
model_full <- lm(formula = inequality,crime)
model_full <- lm(inequality~.,crime)
model_full <- lm(inequality~.,crime)
model_none <- lm(inequality~1.,)
model_full <- lm(inequality~.,crime)
model_none <- lm(inequality~1,crime)
summary(model_none)
summary(model_full)
model_backward <- step(model_full, direction = "backward")
model_backward <- step(model_full, direction = "backward")
summary(model_backward)
model_forward <- step(model_none, scope = list(lower = model_none, upper = model_full), direction = "forward")
summary(model_forward)
model_forward <- step(model_none, scope = list(lower = model_none, upper = model_full), direction = "forward")
model_backward <- step(model_full, direction = "backward")
summary(model_backward)
summary(model_forward)
summary(model_forward)
summary(model_forward)$call
summary(model_forward)
model_both <- step(model_none, scope = list(lower = model_none, upper = model_full), direction = "both")
#summary(model_both)
summary(model_both)
model_both_none <- step(model_none, scope = list(lower = model_none, upper = model_full), direction = "both")
model_both_none <- step(model_none, scope = list(lower = model_none, upper = model_full), direction = "both")
model_both_full <- step(model_none, scope = list(lower =model_full, upper = model_none), direction = "both")
summary(model_backward)$adj.r.square
summary(model_forward)$adj.r.square
summary(model_both_none)$adj.r.square
summary(model_both_full)$adj.r.square
#model_both_none <- step(model_none, scope = list(lower = model_none, upper = model_full), direction = "both")
#model_both_full <- step(model_none, scope = list(lower =model_full, upper = model_none), direction = "both")
summary(model_backward)$adj.r.square
summary(model_forward)$adj.r.square
summary(model_both_none)$adj.r.square
summary(model_both_full)$adj.r.square
#model_both_none <- step(model_none, scope = list(lower = model_none, upper = model_full), direction = "both")
model_both_full <- step(model_none, scope = list(lower =model_full, upper = model_none), direction = "both")
#model_both_none <- step(model_none, scope = list(lower = model_none, upper = model_full), direction = "both")
model_both_full <- step(model_none, scope = list(lower = model_full, upper = model_none), direction = "both")
#model_both_none <- step(model_none, scope = list(lower = model_none, upper = model_full), direction = "both")
model_both_full <- step(model_full, scope = list(lower = model_full, upper = model_none), direction = "both")
model_both_full
#model_both_none <- step(model_none, scope = list(lower = model_none, upper = model_full), direction = "both")
model_both_full <- step(model_full, scope = list(lower = model_full, upper = model_none), direction = "both")
#model_both_none <- step(model_none, scope = list(lower = model_none, upper = model_full), direction = "both")
model_both_full <- step(model_full, direction = "both")
summary(model_backward)$adj.r.square
summary(model_forward)$adj.r.square
summary(model_both_none)$adj.r.square
summary(model_both_full)$adj.r.square
hist(model_both_none$residuals, breaks = 15)
shapiro.test(model_both_none$residuals)
hist(model_both_none$residuals, breaks = 30)
hist(model_both_none$residuals, breaks = 40)
hist(model_both_none$residuals, breaks = 100)
hist(model_both_none$residuals, breaks = 1000)
hist(model_both_none$residuals, breaks = 10000)
hist(model_both_none$residuals, breaks = 100000)
hist(model_both_none$residuals, breaks = 1)
hist(model_both_none$residuals, breaks = 999999999999999999)
hist(model_both_none$residuals, breaks = 100)
plot(crime$inequality, model_both_none$residuals)
plot(crime$inequality, model_both_none$residuals)
abline(h = 0, col = "red")
install.packages("lmtest")
library(lmtest)
library(lmtest,warn.conflicts = F)
bptest(model_both_none)
shapiro.test(model_both_none$residuals)
model_both_none <- step(model_none, scope = list(lower = model_none, upper = model_full), direction = "both")
plot(crime$inequality, model_both_none$residuals)
abline(h = 0, col = "red")
bptest(model_both_none)
plot(crime$inequality, model_both_none$residuals, ylim = c(-50,50))
abline(h = 0, col = "red")
bptest(model_both_none)
plot(crime$inequality, model_both_none$residuals, ylim = c(-200,200))
plot(crime$inequality, model_both_none$residuals, ylim = c(-200,200))
abline(h = 0, col = "red")
plot(crime$inequality, model_both_none$residuals, ylim = c(-2000,2000))
plot(crime$inequality, model_both_none$residuals, ylim = c(-2000,2000))
abline(h = 0, col = "red")
plot(crime$inequality, model_both_none$residuals, ylim = c(-20000,20000))
abline(h = 0, col = "red")
plot(crime$inequality, model_both_none$residuals, ylim = c(-5,5))
abline(h = 0, col = "red")
plot(crime$inequality, model_both_none$residuals, ylim = c(-25,25))
abline(h = 0, col = "red")
library(car)
install.packages("car")
library(car)
library(car,warn.conflicts = F)
vif(model_both_none)
vif(model_full)
cor.test(model_both_none)
cor.test(crime$inequality, crime$gdp)
cor.test(crime$inequality, crime$gdp)$data
cor.test(crime$inequality, crime$gdp)
cor.test(crime$inequality, crime$gdp)$sample.estimates
cor.test(crime$inequality, crime$gdp)
cor.test(crime$inequality, crime$gdp)$p.value
cor.test(crime$inequality, crime$gdp)$t
cor.test(crime$inequality, crime$gdp)$T
cor.test(crime$inequality, crime$gdp)
cor.test(crime$inequality, crime$gdp)$t.value
cor.test(crime$inequality, crime$gdp)
